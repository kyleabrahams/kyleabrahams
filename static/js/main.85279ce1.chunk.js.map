{"version":3,"sources":["components/LandingPage.js","components/Projects.js","components/Main.js","App.js","components/Drawer.js","serviceWorker.js","index.js"],"names":["LandingPage","style","height","width","margin","className","col","href","target","aria-hidden","Component","Projects","props","state","activeTab","this","active","shadow","color","background","border","colored","name","on","Change","tabID","setState","ripple","toggleCategories","Main","exact","path","component","App","title","scroll","to","useStyles","makeStyles","list","fullList","SwipeableTemporaryDrawer","classes","React","useState","top","left","bottom","right","toggleDrawer","anchor","open","event","type","key","map","Fragment","Button","onClick","SwipeableDrawer","onClose","onOpen","clsx","role","onKeyDown","List","text","index","ListItem","button","ListItemIcon","ListItemText","primary","Divider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.85279ce1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Grid, Cell } from 'react-mdl';\n// import picture from '../images/picture.jpg';\n\nclass LandingPage extends Component \n{\n    render()\n    {\n        return(\n            <div style={{height: \"100%\", width: \"100%\", margin: \"auto\"}}>\n                <p></p>\n                <Grid className=\"Landing-grid\">\n                    <Cell col={12}>\n                        {/* <img src={picture} alt=\"avatar\" className=\"avatar-img\" /> */}\n                        <div className=\"banner-text\">\n                            <h1>\n                            UX Designer    \n                            </h1>\n                            <hr />\n                            <p>A-frame | Creative Cloud</p>\n                            <div className=\"social-links\">\n                                <a href=\"https://twitter.com/anagramMC\" target=\"_blank\">\n                                    <i className=\"fa fa-twitter-square\" aria-hidden=\"true\" />\n                                    </a>\n                                    <a href=\"https://twitter.com/anagramMC\" target=\"_blank\">\n                                    <i className=\"fa fa-twitter-square\" aria-hidden=\"true\" />\n                                    </a>\n                                    <a href=\"https://twitter.com/anagramMC\" target=\"_blank\">\n                                    <i className=\"fa fa-twitter-square\" aria-hidden=\"true\" />\n                                    </a>\n                                    <a href=\"https://twitter.com/anagramMC\" target=\"_blank\">\n                                    <i className=\"fa fa-twitter-square\" aria-hidden=\"true\" />\n                                    </a>\n                                    \n                            </div>\n                        </div>\n\n                    </Cell>\n                </Grid>\n            </div>\n        )\n    }\n}\n\nexport default LandingPage;","import React, { Component } from 'react';\nimport { Grid, Cell, Tabs, Tab, Card, CardTitle, CardText, CardActions, Button, CardMenu, IconButton } from 'react-mdl';\n\nclass Projects extends Component \n{\n    constructor(props)\n    {\n        super(props);\n        this.state = { activeTab: 0 };\n    }\n\n    toggleCategories()\n    {\n       switch(this.state.active) \n       {\n           case 0:\n            return(<div className=\"project-grid\">\n                    <Card shadow={5} style={{width: '450px', margin: 'auto'}}>\n                    <CardTitle style={{color: '#fff', height: '176px', background: 'url(http://www.getmdl.io/assets/demos/welcome_card.jpg) center / cover'}}>Welcome</CardTitle>\n                    <CardText>\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                        Mauris sagittis pellentesque lacus eleifend lacinia...\n                    </CardText>\n                    <CardActions border>\n                        <Button colored>Get Started</Button>\n                    </CardActions>\n                    <CardMenu style={{color: '#fff'}}>\n                        <IconButton name=\"share\" />\n                    </CardMenu>\n                    </Card>\n                </div>\n            )\n\n       }\n    }\n\n    render()\n    {\n        return(\n            <div className=\"category-tabs\">\n                <Tabs activeTab={this.state.activeTab} on Change={(tabID) => this.setState({activeTab: tabID})} ripple>\n                    <Tab>Unity</Tab>\n                    <Tab>Unreal</Tab>\n                    <Tab>React</Tab>    \n                </Tabs>\n\n                <Grid>\n                    <Cell col={12}>\n                        <div className=\"Content\">\n                            {this.toggleCategories()}\n                        </div>\n                    </Cell>\n                </Grid>\n            </div>\n        )\n    }\n}\n\nexport default Projects;","import React from 'react';\nimport LandingPage from './LandingPage.js';\nimport Projects from './Projects.js';\nimport { Switch, Route } from 'react-router-dom';\n\nconst Main = () => (\n    <Switch>\n        <Route exact path=\"/\" component={LandingPage} />\n        <Route path=\"/Projects\" component={Projects} />\n    </Switch>\n)\n\nexport default Main;","import React from 'react';\nimport { Layout, Header, Navigation, Content } from 'react-mdl';\nimport { Link } from 'react-router-dom';\nimport Main from './components/Main.js';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"demo-big-content\">\n    <Layout>\n        <Header className=\"header-color\" title=\"Kyle Abrahams\" scroll>\n            <Navigation>\n                <Link to=\"/\">Home</Link>\n                <Link to=\"/Projects\">Projects</Link>\n            \n            </Navigation>\n        </Header>\n        <Content>\n            <div className=\"page-content\" />\n            <Main></Main>\n  \n        </Content>\n    </Layout>\n</div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\n\nconst useStyles = makeStyles({\n  list: {\n    width: 250,\n  },\n  fullList: {\n    width: 'auto',\n  },\n});\n\nexport default function SwipeableTemporaryDrawer() {\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n    top: false,\n    left: false,\n    bottom: false,\n    right: false,\n  });\n\n  const toggleDrawer = (anchor, open) => (event) => {\n    if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n\n    setState({ ...state, [anchor]: open });\n  };\n\n  const list = (anchor) => (\n    <div\n      className={clsx(classes.list, {\n        [classes.fullList]: anchor === 'top' || anchor === 'bottom',\n      })}\n      role=\"presentation\"\n      onClick={toggleDrawer(anchor, false)}\n      onKeyDown={toggleDrawer(anchor, false)}\n    >\n      <List>\n        {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n      <Divider />\n      <List>\n        {['All mail', 'Trash', 'Spam'].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n    </div>\n  );\n\n  return (\n    <div>\n      {['left', 'right', 'top', 'bottom'].map((anchor) => (\n        <React.Fragment key={anchor}>\n          <Button onClick={toggleDrawer(anchor, true)}>{anchor}</Button>\n          <SwipeableDrawer\n            anchor={anchor}\n            open={state[anchor]}\n            onClose={toggleDrawer(anchor, false)}\n            onOpen={toggleDrawer(anchor, true)}\n          >\n            {list(anchor)}\n          </SwipeableDrawer>\n        </React.Fragment>\n      ))}\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Drawer from './components/Drawer';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  \n  <BrowserRouter>\n    <Drawer />\n    <App />\n\n  </BrowserRouter>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}